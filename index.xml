<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>🪴 Biubi's Drawer. on</title><link>https://sylvie-hsu.github.io/quartz/</link><description>Recent content in 🪴 Biubi's Drawer. on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sylvie-hsu.github.io/quartz/index.xml" rel="self" type="application/rss+xml"/><item><title>React</title><link>https://sylvie-hsu.github.io/quartz/notes/react/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sylvie-hsu.github.io/quartz/notes/react/</guid><description>Hooks Introducing Hooks puxiao / react-hook-tutorial Youtube - Codevolution Rules of Hooks Only Call Hooks at the Top Level Only Call Hooks from React Functions useEffect useEffect 执行时会建立闭包，使用 setState 时需要注意参数的值 useEffect 高级用法 有时候，你的 effect 可能会使用一些频繁变化的值。你可能会忽略依赖列表中 state，但这通常会引起 Bug，传入空的依赖数组 []，意味着该 hook 只在组件挂载时运行一次，并非重新渲染时。但如此会有问题，在 setInterval 的回调中，count 的值不会发生变化。因为当 effect 执行时，我们会创建一个闭包，并将 count 的值被保存在该闭包当中，且初值为 0。每隔一秒，回调就会执行 setCount(0 + 1)，因此，count 永远不会超过 1。</description></item><item><title>React</title><link>https://sylvie-hsu.github.io/quartz/notes/the-metaverse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sylvie-hsu.github.io/quartz/notes/the-metaverse/</guid><description>01 什么是元宇宙 “元宇宙”一词最早出现在小说《雪崩》中，但并未被明确定义。目前已经从科幻小说范畴转变成为消费者的真实行为和企业技术的发展前沿。
目前，人们预测元宇宙会是一个“企业互联网”。互联网的非营利性质和早期历史源于这样一个事实：政府发起的研究型实验室和大学实际上是唯一拥有计算人才、资源和建立“网络的网络”这一宏大目标的机构，而在营利性部门中很少有人理解其商业潜力。但对于元宇宙来说，情况大不相同，而且恰恰相反，它是由私人企业开创和建立的，它的目标很明确，那就是提供商业服务、收集数据、出售广告位和销售虚拟产品。
如果发源于私人企业所拥有的产品，元宇宙或许会成为比Web2更资本导向盈利至上的平台。
目前各方对元宇宙的定义和所能涵盖的领域难以达成共识，同时基于递归革新（Recursive Innovation）的特点，元宇宙也很难被预测。
递归革新：技术转型之所以难以预测，就在于它不是由任何一项发明、创新或个人推动的，而是许多变化共同作用的结果。在一项新技术诞生后，社会和个人发明者会对它做出反应，从而产生新的行为和新的产品，这反过来又导致了基础技术新的用例，从而激发了更多新的行为和创造，如此往复。
作者对元宇宙的定义:
大规模、可互操作的网络，能够实时渲染3D虚拟世界，借助大量连续性数据，如身份、历史、权利、对象、通信和支付等，可以让无限数量的用户体验实时同步和持续有效的在场感。
互操作性：统一的传输标准，不同系统或软件间需要具备标准化的可通信能力，用于身份识别、数字支付等 大规模扩展：超出现实世界的多样性 持续性挑战：虚拟世界需要具有持续性历史，即记录发生过的事情并对未来造成影响，而不能像游戏中一样简单对某一关卡进行重置，也因此需要更多计算和存储资源 同步性：成为能共享的体验，需要能够提供高带宽、低延迟和连续性连接的基础设施 无限用户：要求软硬件能够承载更大并发量 元宇宙和Web3概念的区分：</description></item><item><title>Styled-Component</title><link>https://sylvie-hsu.github.io/quartz/notes/styled-component/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sylvie-hsu.github.io/quartz/notes/styled-component/</guid><description>styled-components doc
Basics styled-component = styled React component It removes the mapping between components and styles. This means that when you&amp;rsquo;re defining your styles, you&amp;rsquo;re actually creating a normal React component, that has your styles attached to it.</description></item></channel></rss>